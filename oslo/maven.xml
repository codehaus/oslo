<project
    xmlns:m="maven"
    xmlns:jxr="jxr"
    xmlns:j="jelly:core"
    xmlns:u="jelly:util"
    xmlns:maven="jelly:maven"
    xmlns:ant="jelly:ant">

    <property name="aspectwerkz.classpath" refid="maven.dependency.classpath"/>

    <property environment="env"/>

    <!--    <taskdef name="compileSourceMetaData"
            classname="aspectwerkz.definition.metadata.task.SourceFileMetaDataCompilerTask"
            classpath="${aspectwerkz.classpath}"/>

        <taskdef name="compileClassMetaData"
            classname="aspectwerkz.definition.metadata.task.ClassFileMetaDataCompilerTask"
            classpath="${aspectwerkz.classpath}"/>-->
    <echo>${aspectwerkz.classpath}</echo>

    <ant:taskdef name="offlineTransformation"
        classname="org.codehaus.aspectwerkz.task.OfflineTransformationTask"
        classpath="${aspectwerkz.classpath}"/>

    <!--    <ant:taskdef name="schemaexport"
            classname="net.sf.hibernate.tool.hbm2ddl.SchemaExportTask"
            classpath="${aspectwerkz.classpath}"/>-->
    <!--<taskdef name="compileWeaveModelFromClasses"
        classname="org.codehaus.aspectwerkz.task.ClassFileMetaDataCompilerTask"
        classpath="${aspectwerkz.classpath}"/>-->

    <!--<goal name="createdatabase" prereqs="xdoclet:hibernatedoclet">
        <ant:taskdef name="schemaexport"
            classname="net.sf.hibernate.tool.hbm2ddl.SchemaExportTask"
            classpath="${aspectwerkz.classpath}:${maven.build.dir}/classes"/>
            -->
        <!-- Export the schema to the database -->
<!--        <schemaexport
            properties="${maven.src.dir}/config/hibernate.properties"
            quiet="no"
            text="no"
            delimiter=";"
            output="${maven.build.dir}/schema/${maven.final.name}-schema.sql">
            <fileset dir="${maven.build.dir}/classes">
                <include name="**/*.hbm.xml"/>
            </fileset>
        </schemaexport>
    </goal>-->

    <goal name="build-all" prereqs="clean-all" description="Build all components using reactor">
        <maven:reactor
            basedir="${basedir}"
            includes="*/project.xml"
            goals="default"
            banner="Building"
            ignoreFailures="false"/>
    </goal>

    <goal name="clean-all" prereqs="clean" description="Build all components using reactor">
        <maven:reactor
            basedir="${basedir}"
            includes="*/project.xml"
            goals="clean-it"
            banner="Building"
            ignoreFailures="false"/>
    </goal>

    <!-- =================================================== -->
    <!--  Compile the classes with AspectWerkz               -->
    <!-- =================================================== -->
    <goal name="oslo:aspectwerkz:preprocess" prereqs="java:compile">
        <!--<echo>${maven.src.dir}/aspectwerkz/oslo.xml</echo>
        <echo>${aspectwerkz.classpath}</echo>
        <echo>${maven.build.dir}/classes</echo>
        <echo>aspectwerkz.home=${env.ASPECTWERKZ_HOME}</echo>-->

        <!--    <compileClassMetaData
                definitionFile="${maven.src.dir}/aspectwerkz/oslo.xml"
                repository="${maven.build.dir}/classes"
                metaDataDir="${maven.build.dir}/_metaData"/>   -->

        <!-- Create the meta-data directory -->
        <mkdir dir="${maven.build.dir}/_metaData"/>

        <!--<compileWeaveModelFromClasses
            definitionFile="${maven.src.dir}/aspectwerkz/oslo.xml"
            repository="${maven.build.dir}/classes"
            metaDataDir="${maven.build.dir}/_metaData"/>-->
        <!-- Preprocess the class files -->
        <path id="aspectwerkz.fixed.classpath">
            <pathelement path="./devlib/bcel/jars/bcel-patch.jar"/>
            <pathelement path="./devlib/bcel/jars/bcel.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-client-0.1.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-common-0.1.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-plugins-0.1.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/aspectwerkz/jars/aspectwerkz-0.7.4.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/aspectwerkz/jars/aspectwerkz-core-0.7.4.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/ant/jars/ant-1.5.2.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/dom4j/jars/dom4j-1.4.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/qdox/jars/qdox-1.2.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/concurrent/jars/concurrent-1.3.1.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/trove/jars/trove-1.0.2.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/commons-jexl/jars/commons-jexl-1.0-beta-2.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/piccolo/jars/piccolo-1.03.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/jrexx/jars/jrexx-1.1.1.jar"/>
            <pathelement path="${maven.src.dir}/config"/>
            <!--<path refid="maven.dependency.classpath"/>-->
        </path>

        <property name="cp" refid="aspectwerkz.fixed.classpath"/>
        <!-- Create the meta data weave -->
        <!--<java classname="org.codehaus.aspectwerkz.metadata.ClassFileMetaDataCompiler" fork="true" classpathref="aspectwerkz.fixed.classpath" output="java.output">
            <jvmarg value="-Daspectwerkz.definition.validate=true"/>
            <arg value="${maven.src.dir}/aspectwerkz/oslo.xml"/>
            <arg value="./sample/target/classes"/>
            <arg value="${maven.build.dir}/_metaData"/>
        </java>  -->

        <echo>${cp}</echo>

        <exec executable="java">
            <arg line="-Daspectwerkz.definition.file=${maven.src.dir}/aspectwerkz/oslo.xml"/>
            <arg line="-Daspectwerkz.home=${maven.src.dir}"/>
            <arg line="-cp"/>
            <arg line="${cp}"/>
            <arg line="org.codehaus.aspectwerkz.compiler.AspectWerkzC"/>
            <arg line="-verbose"/>
            <arg value="./sample/target/classes"/>
        </exec>

<!--        <java classname="org.codehaus.aspectwerkz.compiler.AspectWerkzC" classpathref="aspectwerkz.fixed.classpath" fork="true" append="true" output="java.output">
            <jvmarg value="-Daspectwerkz.definition.file=${maven.src.dir}/aspectwerkz/oslo.xml"/>
            <jvmarg value="-Daspectwerkz.transform.verbose=yes"/>
            <jvmarg value="-Daspectwerkz.home=${maven.src.dir}"/>-->
<!--            <jvmarg value="-Daspectwerkz.metadata.dir=${maven.build.dir}/_metaData"/>
            <jvmarg value="-Dorg.cs3.jmangler.initfile=${maven.src.dir}/config/jmangler-order.config"/>-->
<!--            <arg value="-cp"/>
            <arg value="./sample/target/classes"/>
            <arg value="-tcp"/>
            <arg value="${basedir}/devlib/aspectwerkz/jars/aspectwerkz-0.7.4.jar"/>
            <arg value="-cf"/>
            <arg value="${maven.src.dir}/config/aspectwerkz.conf"/>-->
<!--            <arg value="./sample/target/classes"/>
        </java>                                       -->

        <!--<jvmarg value="-Daspectwerkz.metadata.dir=${maven.build.dir}/_metaData"/>-->

        <!--<offlineTransformation
            aspectWerkzHome="${env.ASPECTWERKZ_HOME}"
            definitionFile="${maven.src.dir}/aspectwerkz/oslo.xml"
            classesDir="${maven.build.dir}/classes"
            metaDataDir="${maven.build.dir}/_metaData"/>-->

        <!-- Load the output and display it -->
        <loadfile property="message" srcFile="java.output"/>
        <echo>${message}</echo>
    </goal>

    <goal name="oslo:execute:sample"> <!--prereqs="oslo:aspectwerkz:preprocess">-->
        <!-- ClassPath for the sample file -->
        <path id="execute.path">
            <pathelement path="./sample/target/classes"/>
            <pathelement path="${basedir}/devlib/bcel/jars/bcel.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-client-0.1.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-common-0.1.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-plugins-0.1.jar"/>
            <path refid="maven.dependency.classpath"/>
        </path>

        <!-- Execute the sample class with or without the aspects -->
        <java classname="org.oslo.sampleapp.SampleMain" fork="true" classpathref="execute.path" output="java.output">
            <jvmarg value="-Daspectwerkz.definition.file=${maven.src.dir}/aspectwerkz/oslo.xml"/>
            <jvmarg value="-Daspectwerkz.home=${basedir}"/>
            <jvmarg value="-Daspectwerkz.metadata.dir=${maven.build.dir}/_metaData"/>
            <jvmarg value="-Doslo.id.number=testApp_31_07_03"/>
        </java>

        <!-- Load the output and display it -->
        <loadfile property="message" srcFile="java.output"/>
        <echo>${message}</echo>
    </goal>

    <goal name="oslo:execute:console">
        <!--
           Seems to be a problem with ant and reflection, use run-console.sh
           to start the console
        -->

        <!-- ClassPath for the sample file -->
        <path id="execute.path">
            <pathelement path="${basedir}/devlib/bcel/jars/bcel.jar"/>
            <path refid="maven.dependency.classpath"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-common-0.1.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-plugins-0.1.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-server-0.1.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-console-0.1.jar"/>
            <pathelement path="${maven.build.dir}/classes"/>
        </path>

        <property name="cp" refid="execute.path"/>
        <echo>${cp}</echo>

        <!-- Execute the sample class with or without the aspects -->
        <java classname="org.oslo.cli.CommandLine" fork="false" classpathref="execute.path" />
    </goal>

    <goal name="oslo:start:server"> <!--prereqs="oslo:cleanup, oslo:aspectwerkz:preprocess">-->
        <!--<echo>${env.MAVEN_HOME}/repository/oslo/oslo-console-0.1.jar</echo>-->

        <!-- ClassPath for the sample file -->
        <path id="execute.path">
            <pathelement path="${basedir}/devlib/bcel/jars/bcel.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-common-0.1.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-plugins-0.1.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-server-0.1.jar"/>
            <pathelement path="${env.MAVEN_HOME}/repository/oslo/jars/oslo-console-0.1.jar"/>
            <path refid="maven.dependency.classpath"/>
            <pathelement path="${maven.src.dir}/properties"/>
        </path>

        <java classname="org.oslo.rantserver.RantLoggingServer" fork="true" classpathref="execute.path" output="server.java.output"/>

        <!-- Load the output and display it -->
        <loadfile property="message" srcFile="server.java.output"/>
        <echo>${message}</echo>
    </goal>

    <goal name="oslo:cleanup">
        <delete quiet="true" dir="${maven.build.dir}"/>
        <delete quiet="true" file="java.output"/>
        <delete quiet="true" file="server.java.output"/>
        <delete quiet="true">
            <fileset dir="./database" includes="**/*"/>
        </delete>
    </goal>

    <goal name="oslo:execute:sequence-gui">
        <java classname="com.zanthan.sequence.Main" fork="true" classpathref="maven.dependency.classpath" output="java.output"/>
    </goal>
</project>